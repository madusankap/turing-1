Index: core/src/main/java/org/apache/commons/vfs2/provider/ftp/FtpFileProvider.java
===================================================================
--- core/src/main/java/org/apache/commons/vfs2/provider/ftp/FtpFileProvider.java	(revision 1087251)
+++ core/src/main/java/org/apache/commons/vfs2/provider/ftp/FtpFileProvider.java	(working copy)
@@ -19,6 +19,7 @@
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.StringTokenizer;
 
 import org.apache.commons.vfs2.Capability;
 import org.apache.commons.vfs2.FileName;
@@ -29,6 +30,7 @@
 import org.apache.commons.vfs2.UserAuthenticationData;
 import org.apache.commons.vfs2.provider.AbstractOriginatingFileProvider;
 import org.apache.commons.vfs2.provider.GenericFileName;
+import org.apache.commons.vfs2.provider.URLFileName;
 
 /**
  * A provider for FTP file systems.
@@ -45,6 +47,11 @@
     public static final String ATTR_FILE_ENTRY_PARSER = "FEP";
 
     /**
+     * Passive mode
+     */
+    public static final String PASSIVE_MODE = "vfs.passive";
+
+    /**
      * Authenticator types.
      */
     public static final UserAuthenticationData.Type[] AUTHENTICATOR_TYPES = new UserAuthenticationData.Type[]
@@ -81,9 +88,26 @@
         throws FileSystemException
     {
         // Create the file system
-        final GenericFileName rootName = (GenericFileName) name;
+        final URLFileName rootName = (URLFileName) name;
 
-        FTPClientWrapper ftpClient = new FTPClientWrapper(rootName, fileSystemOptions);
+
+        //FTPClientWrapper ftpClient = new FTPClientWrapper(rootName, fileSystemOptions);
+
+        String queryString = rootName.getQueryString();
+        FileSystemOptions opts = fileSystemOptions;
+        if (opts == null) {
+            opts = new FileSystemOptions();
+        }
+        if (queryString != null) {
+            FtpFileSystemConfigBuilder cfgBuilder = FtpFileSystemConfigBuilder.getInstance();
+            StringTokenizer st = new StringTokenizer(queryString, "?&!=");
+            while (st.hasMoreTokens()) {
+                if (PASSIVE_MODE.equalsIgnoreCase(st.nextToken()) &&
+                        st.hasMoreTokens() && "true".equalsIgnoreCase(st.nextToken())) {
+                    cfgBuilder.setPassiveMode(opts, true);
+                }
+            }
+        }
         /*
         FTPClient ftpClient = FtpClientFactory.createConnection(rootName.getHostName(),
             rootName.getPort(),
@@ -92,7 +116,7 @@
             rootName.getPath(),
             fileSystemOptions);
         */
-
+        FTPClientWrapper ftpClient = new FTPClientWrapper(rootName, opts);
         return new FtpFileSystem(rootName, ftpClient, fileSystemOptions);
     }
 
Index: core/src/main/java/org/apache/commons/vfs2/provider/ftp/FtpFileNameParser.java
===================================================================
--- core/src/main/java/org/apache/commons/vfs2/provider/ftp/FtpFileNameParser.java	(revision 1087251)
+++ core/src/main/java/org/apache/commons/vfs2/provider/ftp/FtpFileNameParser.java	(working copy)
@@ -16,8 +16,10 @@
  */
 package org.apache.commons.vfs2.provider.ftp;
 
-import org.apache.commons.vfs2.provider.FileNameParser;
-import org.apache.commons.vfs2.provider.HostFileNameParser;
+import org.apache.commons.vfs2.provider.*;
+import org.apache.commons.vfs2.FileName;
+import org.apache.commons.vfs2.FileSystemException;
+import org.apache.commons.vfs2.FileType;
 
 /**
  * Implementation for ftp. set default port to 21
@@ -29,13 +31,44 @@
 
     private static final int PORT = 21;
 
-    public FtpFileNameParser()
-    {
+    public FtpFileNameParser() {
         super(PORT);
     }
 
-    public static FileNameParser getInstance()
-    {
+    public static FileNameParser getInstance() {
         return INSTANCE;
     }
+
+    public FileName parseUri(final VfsComponentContext context, FileName base, final String fileName)
+            throws FileSystemException {
+        // FTP URIs are generic URIs as per RFC 2396
+        StringBuilder name = new StringBuilder();
+
+        // Extract the scheme and authority parts
+        final Authority auth = extractToPath(fileName, name);
+
+        // Extract the queuString
+        String queuString = UriParser.extractQueryString(name);
+        if(queuString == null && base instanceof URLFileName){
+            queuString = ((URLFileName) base).getQueryString();
+        }
+
+        // Decode and normalise the file name
+        UriParser.canonicalizePath(name, 0, name.length(), this);
+        UriParser.fixSeparators(name);
+        FileType fileType = UriParser.normalisePath(name);
+        final String path = name.toString();
+
+        return new URLFileName(
+                auth.getScheme(),
+                auth.getHostName(),
+                auth.getPort(),
+                getDefaultPort(),
+                auth.getUserName(),
+                auth.getPassword(),
+                path,
+                fileType,
+                queuString);
+
+    }
 }
Index: core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpClientFactory.java
===================================================================
--- core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpClientFactory.java	(revision 1087251)
+++ core/src/main/java/org/apache/commons/vfs2/provider/sftp/SftpClientFactory.java	(working copy)
@@ -19,18 +19,13 @@
 import java.io.File;
 import java.util.Properties;
 
+import com.jcraft.jsch.*;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.commons.vfs2.FileSystemException;
 import org.apache.commons.vfs2.FileSystemOptions;
 import org.apache.commons.vfs2.util.Os;
 
-import com.jcraft.jsch.JSch;
-import com.jcraft.jsch.JSchException;
-import com.jcraft.jsch.Proxy;
-import com.jcraft.jsch.ProxyHTTP;
-import com.jcraft.jsch.ProxySOCKS5;
-import com.jcraft.jsch.Session;
-import com.jcraft.jsch.UserInfo;
-
 /**
  * Create a JSch Session instance.
  *
@@ -41,6 +36,8 @@
 {
     private static final String SSH_DIR_NAME = ".ssh";
 
+    private static final Log log = LogFactory.getLog(SftpClientFactory.class);
+
     private SftpClientFactory()
     {
     }
@@ -58,6 +55,7 @@
     public static Session createConnection(String hostname, int port, char[] username, char[] password,
                                            FileSystemOptions fileSystemOptions) throws FileSystemException
     {
+        JSch.setLogger(new JSchLogger());
         JSch jsch = new JSch();
 
         File sshDir = null;
@@ -285,4 +283,40 @@
         }
         return new File("");
     }
+
+    public static class JSchLogger implements Logger {
+        public boolean isEnabled(int level) {
+            switch (level) {
+                case FATAL:
+                    return log.isFatalEnabled();
+                case ERROR:
+                    return log.isErrorEnabled();
+                case WARN:
+                    return log.isWarnEnabled();
+                case INFO:
+                    return log.isInfoEnabled();
+                default:
+                    return log.isDebugEnabled();
+            }
+        }
+
+        public void log(int level, String message) {
+            switch (level) {
+                case FATAL:
+                    log.fatal("[JSCH] " + message);
+                    break;
+                case ERROR:
+                    log.error("[JSCH] " + message);
+                    break;
+                case WARN:
+                    log.warn("[JSCH] " + message);
+                    break;
+                case INFO:
+                    log.info("[JSCH] " + message);
+                    break;
+                default:
+                    log.debug("[JSCH] " + message);
+            }
+        }
+    }
 }
